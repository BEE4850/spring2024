{
  "hash": "c345639a6a789ab7d3538a50f3bf26a9",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Tutorial: Julia Basics\"\nexecute:\n    error: true\n    warning: true\nengine: julia\njulia:\n    exeflags: [\"+1.9.4\"]\n---\n\n## Overview\n\nThis tutorial will give some examples of basic Julia commands and syntax.\n\n## Getting Help\n\n* Check out the official documentation for Julia: [https://docs.julialang.org/en/v1/](https://docs.julialang.org/en/v1/).\n* [Stack Overflow](https://stackoverflow.com) is a commonly-used resource for programming assistance.\n* At a code prompt or in the REPL, you can always type `?functionname` to get help.\n\n## Comments\nComments hide statements from the interpreter or compiler. It's a good idea to liberally comment your code so readers  (including yourself!) know why your code is structured and written the way it is.\nSingle-line comments in Julia are preceded with a `#`. Multi-line comments are preceded with `#=` and ended with `=#`\n\n## Suppressing Output\n\nYou can suppress output using a semi-colon (;).\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\n4+8;\n```\n:::\n\n\n\nThat didn't show anything, as opposed to:\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\n4+8\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n12\n```\n:::\n:::\n\n\n\n## Variables\nVariables are names which correspond to some type of object. These names are bound to objects (and hence their values) using the `=` operator.\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nx = 5\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n5\n```\n:::\n:::\n\n\n\nVariables can be manipulated with standard arithmetic operators.\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\n4 + x\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n9\n```\n:::\n:::\n\n\n\nAnother advantage of Julia is the ability to use Greek letters (or other Unicode characters) as variable names. For example, type a backslash followed by the name of the Greek letter (*i.e.* `\\alpha`) followed by TAB.\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\nα = 3\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3\n```\n:::\n:::\n\n\n\nYou can also include subscripts or superscripts in variable names using `\\_` and `\\^`, respectively, followed by TAB. If using a Greek letter followed by a sub- or super-script, make sure you TAB following the name of the letter before the sub- or super-script. Effectively, TAB after you finish typing the name of each `\\character`.\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\nβ₁ = 10 # The name of this variable was entered with \\beta + TAB + \\_1 + TAB\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10\n```\n:::\n:::\n\n\n\nHowever, try not to overwrite predefined names! For example, you might not want to use `π` as a variable name...\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\nπ\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nπ = 3.1415926535897...\n```\n:::\n:::\n\n\n\nIn the grand scheme of things, overwriting `π` is not a huge deal unless you want to do some trigonometry. However, there are more important predefined functions and variables that you may want to be aware of. Always check that a variable or function name is not predefined!\n\n## Data Types\n\nEach datum (importantly, *not* the variable which is bound to it) has a [data type](https://docs.julialang.org/en/v1/manual/types/). Julia types are similar to C types, in that they require not only the *type* of data (Int, Float, String, etc), but also the precision (which is related to the amount of memory allocated to the variable). Issues with precision won't be a big deal in this class, though they matter when you're concerned about performance vs. decimal accuracy of code.\n\nYou can identify the type of a variable or expression with the `typeof()` function.\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(\"This is a string.\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nString\n```\n:::\n:::\n\n\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nInt64\n```\n:::\n:::\n\n\n\n### Numeric types\nA key distinction is between an integer type (or *Int*) and a floating-point number type (or *float*). Integers only hold whole numbers, while floating-point numbers correspond to numbers with fractional (or decimal) parts. For example, `9` is an integer, while `9.25` is a floating point number. The difference between the two has to do with the way the number is stored in memory. `9`, an integer, is handled differently in memory than `9.0`, which is a floating-point number, even though they're mathematically the same value.\n\n::: {#20 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(9)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nInt64\n```\n:::\n:::\n\n\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(9.25)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nFloat64\n```\n:::\n:::\n\n\n\nSometimes certain function specifications will require you to use a Float variable instead of an Int. One way to force an Int variable to be a Float is to add a decimal point at the end of the integer.\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(9.)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nFloat64\n```\n:::\n:::\n\n\n\n### Strings\nStrings hold characters, rather than numeric values. Even if a string contains what seems like a number, it is actually stored as the character representation of the digits. As a result, you cannot use arithmetic operators (for example) on this datum.\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\n\"5\" + 5\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching +(::String, ::Int64)\n\nClosest candidates are:\n  +(::Any, ::Any, <span class=\"ansi-bright-red-fg\">::Any</span>, <span class=\"ansi-bright-red-fg\">::Any...</span>)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">Base</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">operators.jl:578</span>\n  +(<span class=\"ansi-bright-red-fg\">::T</span>, ::T) where T&lt;:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">Base</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">int.jl:87</span>\n  +(<span class=\"ansi-bright-red-fg\">::Rational</span>, ::Integer)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">Base</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">rational.jl:327</span>\n  ...\n\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">~/Teaching/BEE4850/sp24/tutorials/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">julia-basics.qmd:106</span></pre>\n```\n:::\n\n:::\n:::\n\n\n\nHowever, you can try to tell Julia to interpret a string encoding a numeric character as a numeric value using the `parse()` function. This can also be used to encode a numeric data as a string.\n\n::: {#28 .cell execution_count=1}\n``` {.julia .cell-code}\nparse(Int64, \"5\") + 5\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10\n```\n:::\n:::\n\n\n\nTwo strings can be concatenated using `*`:\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\n\"Hello\" * \" \" * \"there\"\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n\"Hello there\"\n```\n:::\n:::\n\n\n\n### Booleans\n\nBoolean variables (or *Bools*) are logical variables, that can have `true` or `false` as values.\n\n::: {#32 .cell execution_count=1}\n``` {.julia .cell-code}\nb = true\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\nNumerical comparisons, such as `==`, `!=`, or `<`, return a Bool.\n\n::: {#34 .cell execution_count=1}\n``` {.julia .cell-code}\nc = 9 > 11\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nfalse\n```\n:::\n:::\n\n\n\nBools are important for logical flows, such as if-then-else blocks or certain types of loops.\n\n## Mathematical operations\n\nAddition, subtraction, multiplication, and division work as you would expect. Just pay attention to types! The type of the output is influenced by the type of the inputs: adding or multiplying an Int by a Float will always result in a Float, even if the Float is mathematically an integer. Division is a little special: dividing an Int by another Int will still return a float, because Julia doesn't know ahead of time if the denominator is a factor of the numerator.\n\n::: {#36 .cell execution_count=1}\n``` {.julia .cell-code}\n3 + 5\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n8\n```\n:::\n:::\n\n\n\n::: {#38 .cell execution_count=1}\n``` {.julia .cell-code}\n3 * 2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n6\n```\n:::\n:::\n\n\n\n::: {#40 .cell execution_count=1}\n``` {.julia .cell-code}\n3 * 2.\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n6.0\n```\n:::\n:::\n\n\n\n::: {#42 .cell execution_count=1}\n``` {.julia .cell-code}\n6 - 2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4\n```\n:::\n:::\n\n\n\n::: {#44 .cell execution_count=1}\n``` {.julia .cell-code}\n9 / 3\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3.0\n```\n:::\n:::\n\n\n\nRaising a base to an exponent uses `^`, not `**`.\n\n::: {#46 .cell execution_count=1}\n``` {.julia .cell-code}\n3^2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n9\n```\n:::\n:::\n\n\n\nJulia allows the use of updating operators to simplify updating a variable in place (in other words, using `x += 5` instead of `x = x + 5`.\n\n### Boolean algebra\n\nLogical operations can be used on variables of type `Bool`. Typical operators are `&&` (and), `||` (or), and `!` (not).\n\n::: {#48 .cell execution_count=1}\n``` {.julia .cell-code}\ntrue && true\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#50 .cell execution_count=1}\n``` {.julia .cell-code}\ntrue && false\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nfalse\n```\n:::\n:::\n\n\n\n::: {#52 .cell execution_count=1}\n``` {.julia .cell-code}\ntrue || false\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#54 .cell execution_count=1}\n``` {.julia .cell-code}\n!true\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nfalse\n```\n:::\n:::\n\n\n\nComparisons can be chained together.\n\n::: {#56 .cell execution_count=1}\n``` {.julia .cell-code}\n3 < 4 || 8 == 12\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\nWe didn't do this above, since Julia doesn't require it, but it's easier to understand these types of compound expressions if you use parentheses to signal the order of operations. This helps with debugging!\n\n::: {#58 .cell execution_count=1}\n``` {.julia .cell-code}\n(3 < 4) || (8 == 12)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n## Data Structures\n\nData structures are containers which hold multiple values in a convenient fashion. Julia has several built-in data structures, and there are many extensions provided in additional packages.\n\n### Tuples\n\nTuples are collections of values. Julia will pay attention to the types of these values, but they can be mixed. Tuples are also *immutable*: their values cannot be changed once they are defined.\n\nTuples can be defined by just separating values with commas.\n\n::: {#60 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_tuple = 4, 5, 6\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n(4, 5, 6)\n```\n:::\n:::\n\n\n\nTo access a value, use square brackets and the desired index. **Note**: Julia indexing starts at 1, not 0!\n\n::: {#62 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_tuple[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4\n```\n:::\n:::\n\n\n\nAs mentioned above, tuples are immutable. What happens if we try to change the value of the first element of `test_tuple`?\n\n::: {#64 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_tuple[1] = 5\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching setindex!(::Tuple{Int64, Int64, Int64}, ::Int64, ::Int64)\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">~/Teaching/BEE4850/sp24/tutorials/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">julia-basics.qmd:224</span></pre>\n```\n:::\n\n:::\n:::\n\n\n\nTuples also do not have to hold the same types of values.\n\n::: {#66 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_tuple_2 = 4, 5., 'h'\ntypeof(test_tuple_2)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nTuple{Int64, Float64, Char}\n```\n:::\n:::\n\n\n\nTuples can also be defined by enclosing the values in parentheses.\n\n```{juliA}\ntest_tuple_3 = (4, 5., 'h')\ntypeof(test_tuple_3)\n```\n\n### Arrays\nArrays also hold multiple values, which can be accessed based on their index position. Arrays are commonly defined using square brackets.\n\n::: {#68 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_array = [1, 4, 7, 8]\ntest_array[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4\n```\n:::\n:::\n\n\n\nUnlike tuples, arrays are mutable, and their contained values can be changed later.\n\n::: {#70 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_array[1] = 6\ntest_array\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4-element Vector{Int64}:\n 6\n 4\n 7\n 8\n```\n:::\n:::\n\n\n\nArrays also can hold multiple types. Unlike tuples, this causes the array to no longer care about types at all.\n\n::: {#72 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_array_2 = [6, 5., 'h']\ntypeof(test_array_2)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Vector{Any}<span class=\"ansi-bright-black-fg\"> (alias for </span><span class=\"ansi-bright-black-fg\">Array{Any, 1}</span><span class=\"ansi-bright-black-fg\">)</span></pre>\n```\n:::\n\n:::\n:::\n\n\n\nCompare this with `test_array`:\n\n::: {#74 .cell execution_count=1}\n``` {.julia .cell-code}\ntypeof(test_array)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Vector{Int64}<span class=\"ansi-bright-black-fg\"> (alias for </span><span class=\"ansi-bright-black-fg\">Array{Int64, 1}</span><span class=\"ansi-bright-black-fg\">)</span></pre>\n```\n:::\n\n:::\n:::\n\n\n\n### Dictionaries\n\nInstead of using integer indices based on position, dictionaries are indexed by keys. They are specified by passing key-value pairs to the `Dict()` method.\n\n::: {#76 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_dict = Dict(\"A\"=>1, \"B\"=>2)\ntest_dict[\"B\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\n\n### Comprehensions\n\nCreating a data structure with more than a handful of elements can be tedious to do by hand. If your desired array follows a certain pattern, you can create structures using a *comprehension*. Comprehensions iterate over some other data structure (such as an array) implicitly and populate the new data structure based on the specified instructions.\n\n::: {#78 .cell execution_count=1}\n``` {.julia .cell-code}\n[i^2 for i in 0:1:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n6-element Vector{Int64}:\n  0\n  1\n  4\n  9\n 16\n 25\n```\n:::\n:::\n\n\n\nFor dictionaries, make sure that you also specify the keys.\n\n::: {#80 .cell execution_count=1}\n``` {.julia .cell-code}\nDict(string(i) => i^2 for i in 0:1:5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nDict{String, Int64} with 6 entries:\n  \"4\" => 16\n  \"1\" => 1\n  \"5\" => 25\n  \"0\" => 0\n  \"2\" => 4\n  \"3\" => 9\n```\n:::\n:::\n\n\n\n## Functions\n\nA function is an object which accepts a tuple of arguments and maps them to a return value. In Julia, functions are defined using the following syntax.\n\n::: {#82 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction my_actual_function(x, y)\n\treturn x + y\nend\nmy_actual_function(3, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n8\n```\n:::\n:::\n\n\n\nFunctions in Julia do not require explicit use of a `return` statement. They will return the last expression evaluated in their definition. However, it's good style to explicitly `return` function outputs. This improves readability and debugging, especially when functions can return multiple expressions based on logical control flows (if-then-else blocks).\n\nFunctions in Julia are objects, and can be treated like other objects. They can be assigned to new variables or passed as arguments to other functions.\n\n::: {#84 .cell execution_count=1}\n``` {.julia .cell-code}\ng = my_actual_function\ng(3, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n8\n```\n:::\n:::\n\n\n\n::: {#86 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction function_of_functions(f, x, y)\n\treturn f(x, y)\nend\nfunction_of_functions(g, 3, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n8\n```\n:::\n:::\n\n\n\n### Short and Anonymous Functions\n\nIn addition to the long form of the function definition shown above, simple functions can be specified in more compact forms when helpful.\n\nThis is the short form:\n\n::: {#88 .cell execution_count=1}\n``` {.julia .cell-code}\nh₁(x) = x^2 # make the subscript using \\_1 + <TAB>\nh₁(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n16\n```\n:::\n:::\n\n\n\nThis is the anonymous form:\n\n::: {#90 .cell execution_count=1}\n``` {.julia .cell-code}\nx->sin(x)\n(x->sin(x))(π/4)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n0.7071067811865475\n```\n:::\n:::\n\n\n\n### Mutating Functions\nThe convention in Julia is that functions should not modify (or *mutate*) their input data. The reason for this is to ensure that the data is preserved. Mutating functions are mainly appropriate for applications where performance needs to be optimized, and making a copy of the input data would be too memory-intensive.\n\nIf you do write a mutating function in Julia, the convention is to add a `!` to its name, like `my_mutating_function!(x)`.\n\n### Optional arguments\n\nThere are two extremes with regard to function parameters which do not always need to be changed. The first is to hard-code them into the function body, which has a clear downside: when you do want to change them, the function needs to be edited directly. The other extreme is to treat them as regular arguments, passing them every time the function is called. This has the downside of potentially creating bloated function calls, particularly when there is a standard default value that makes sense for most function evaluations.\n\nMost modern languages, including Julia, allow an alternate solution, which is to make these arguments *optional*. This involves setting a default value, which is used unless the argument is explicitly defined in a function call.\n\n::: {#92 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction setting_optional_arguments(x, y, c=0.5)\n\treturn c * (x + y)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nsetting_optional_arguments (generic function with 2 methods)\n```\n:::\n:::\n\n\n\nIf we want to stick with the fixed value $c=0.5$, all we have to do is call `setting_optional_arguments` with the `x` and `y` arguments.\n\n::: {#94 .cell execution_count=1}\n``` {.julia .cell-code}\nsetting_optional_arguments(3, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4.0\n```\n:::\n:::\n\n\n\nOtherwise, we can pass a new value for `c`.\n\n::: {#96 .cell execution_count=1}\n``` {.julia .cell-code}\nsetting_optional_arguments(3, 5, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n16\n```\n:::\n:::\n\n\n\n### Passing data structures as arguments\n\nInstead of passing variables individually, it may make sense to pass a data structure, such as an array or a tuple, and then unpacking within the function definition. This is straightforward in long form: access the appropriate elements using their index.\n\nIn short or anonymous form, there is a trick which allows the use of readable variables within the function definition.\n\n::: {#98 .cell execution_count=1}\n``` {.julia .cell-code}\nh₂((x,y)) = x*y # enclose the input arguments in parentheses to tell Julia to expect and unpack a tuple\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nh₂ (generic function with 1 method)\n```\n:::\n:::\n\n\n\n::: {#100 .cell execution_count=1}\n``` {.julia .cell-code}\nh₂((2, 3)) # this works perfectly, as we passed in a tuple\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n6\n```\n:::\n:::\n\n\n\n::: {#102 .cell execution_count=1}\n``` {.julia .cell-code}\nh₂(2, 3) # this gives an error, as h₂ expects a single tuple, not two different numeric values\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching h₂(::Int64, ::Int64)\n\nClosest candidates are:\n  h₂(::Any)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-cyan-fg\">Main.Notebook</span> <span class=\"ansi-bright-black-fg\">~/Teaching/BEE4850/sp24/tutorials/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">julia-basics.qmd:370</span>\n\nStacktrace:\n [1] top-level scope\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">~/Teaching/BEE4850/sp24/tutorials/</span><span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">julia-basics.qmd:378</span></pre>\n```\n:::\n\n:::\n:::\n\n\n\n::: {#104 .cell execution_count=1}\n``` {.julia .cell-code}\nh₂([3, 10]) # this also works with arrays instead of tuples\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n30\n```\n:::\n:::\n\n\n\n### Vectorized operations\n\nJulia uses **dot syntax** to vectorize an operation and apply it *element-wise* across an array.\n\nFor example, to calculate the square root of 3:\n\n::: {#106 .cell execution_count=1}\n``` {.julia .cell-code}\nsqrt(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n1.7320508075688772\n```\n:::\n:::\n\n\n\nTo calculate the square roots of every integer between 1 and 5:\n\n::: {#108 .cell execution_count=1}\n``` {.julia .cell-code}\nsqrt.([1, 2, 3, 4, 5])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n5-element Vector{Float64}:\n 1.0\n 1.4142135623730951\n 1.7320508075688772\n 2.0\n 2.23606797749979\n```\n:::\n:::\n\n\n\nThe same dot syntax is used for arithmetic operations over arrays, since these operations are really functions.\n\n::: {#110 .cell execution_count=1}\n``` {.julia .cell-code}\n[1, 2, 3, 4] .* 2\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4-element Vector{Int64}:\n 2\n 4\n 6\n 8\n```\n:::\n:::\n\n\n\nVectorization can be faster and is more concise to write and read than applying the same function to multiple variables or objects explicitly, so take advantage!\n\n### Returning multiple values\n\nYou can return multiple values by separating them with a comma. This implicitly causes the function to return a tuple of values.\n\n::: {#112 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction return_multiple_values(x, y)\n\treturn x + y, x * y\nend\nreturn_multiple_values(3, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n(8, 15)\n```\n:::\n:::\n\n\n\nThese values can be unpacked into multiple variables.\n\n::: {#114 .cell execution_count=1}\n``` {.julia .cell-code}\nn, ν = return_multiple_values(3, 5)\nn\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n8\n```\n:::\n:::\n\n\n\n::: {#116 .cell execution_count=1}\n``` {.julia .cell-code}\nν\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n15\n```\n:::\n:::\n\n\n\n### Returning `nothing`\n\nSometimes you don't want a function to return any values at all. For example, you might want a function that only prints a string to the console.\n\n::: {#118 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction print_some_string(x)\n\tprintln(\"x: $x\")\n\treturn nothing\nend\nprint_some_string(42)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx: 42\n```\n:::\n:::\n\n\n\n## Printing Text Output\n\nThe `Text()` function returns its argument as a plain text string. Notice how this is different from evaluating a string!\n\n::: {#120 .cell execution_count=1}\n``` {.julia .cell-code}\nText(\"I'm printing a string.\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nI'm printing a string.\n```\n:::\n:::\n\n\n\n`Text()` is used in this tutorial as it *returns* the string passed to it. To print directly to the console, use `println()`.\n\n::: {#122 .cell execution_count=1}\n``` {.julia .cell-code}\nprintln(\"I'm writing a string to the console.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI'm writing a string to the console.\n```\n:::\n:::\n\n\n\n### Printing Variables In a String\n\nWhat if we want to include the value of a variable inside of a string? We do this using *string interpolation*, using `$variablename` inside of the string.\n\n::: {#124 .cell execution_count=1}\n``` {.julia .cell-code}\nbar = 42\nText(\"Now I'm printing a variable: $bar\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nNow I'm printing a variable: 42\n```\n:::\n:::\n\n\n\n## Control Flows\n\nOne of the tricky things about learning a new programming language can be getting used to the specifics of control flow syntax. These types of flows include conditional if-then-else statements or loops.\n\n### Conditional Blocks\n\nConditional blocks allow different pieces of code to be evaluated depending on the value of a boolean expression or variable. For example, if we wanted to compute the absolute value of a number, rather than using `abs()`:\n\n::: {#126 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction our_abs(x)\n\tif x >= 0\n\t\treturn x\n\telse\n\t\treturn -x\n\tend\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nour_abs (generic function with 1 method)\n```\n:::\n:::\n\n\n\n::: {#128 .cell execution_count=1}\n``` {.julia .cell-code}\nour_abs(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4\n```\n:::\n:::\n\n\n\n::: {#130 .cell execution_count=1}\n``` {.julia .cell-code}\nour_abs(-4)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n4\n```\n:::\n:::\n\n\n\nTo nest conditional statements, use `elseif`.\n\n::: {#132 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction test_sign(x)\n\tif x > 0\n\t\treturn Text(\"x is positive.\")\n\telseif x < 0\n\t\treturn Text(\"x is negative.\")\n\telse\n\t\treturn Text(\"x is zero.\")\n\tend\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntest_sign (generic function with 1 method)\n```\n:::\n:::\n\n\n\n::: {#134 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_sign(-5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nx is negative.\n```\n:::\n:::\n\n\n\n::: {#136 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_sign(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nx is zero.\n```\n:::\n:::\n\n\n\n### Loops\n\nLoops allow expressions to be evaluated repeatedly until they are terminated. The two main types of loops are `while` loops and `for` loops.\n\n#### While loops\n\n`while` loops continue to evaluate an expression so long as a specified boolean condition is `true`. This is useful when you don't know how many iterations it will take for the desired goal to be reached.\n\n::: {#138 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction compute_factorial(x)\n\tfactorial = 1\n\twhile (x > 1)\n\t\tfactorial *= x\n\t\tx -= 1\n\tend\n\treturn factorial\nend\ncompute_factorial(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n120\n```\n:::\n:::\n\n\n\n::: .{callout-warning}\nWhile loops can easily turn into infinite loops if the condition is never meaningfully updated. Be careful, and look there if your programs are getting stuck. Also, If the expression in a `while` loop is false when the loop is reached, the loop will never be evaluated.\n:::\n\n#### For loops\n\n`for` loops run for a finite number of iterations, based on some defined index variable.\n\n::: {#140 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction add_some_numbers(x)\n\ttotal_sum = 0 # initialize at zero since we're adding\n\tfor i=1:x # the counter i is updated every iteration\n\t\ttotal_sum += i\n\tend\n\treturn total_sum\nend\nadd_some_numbers(4)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n10\n```\n:::\n:::\n\n\n\n`for` loops can also iterate over explicitly passed containers, rather than iterating over an incrementally-updated index sequence. Use the `in` keyword when defining the loop.\n\n::: {#142 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction add_passed_numbers(set)\n\ttotal_sum = 0\n\tfor i in set # this is the syntax we use when we want i to correspond to different container values\n\t\ttotal_sum += i\n\tend\n\treturn total_sum\nend\nadd_passed_numbers([1, 3, 5])\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n9\n```\n:::\n:::\n\n\n\n## Linear algebra\n\nMatrices are defined in Julia as 2d arrays. Unlike basic arrays, matrices need to contain the same data type so Julia knows what operations are allowed. When defining a matrix, use semicolons to separate rows. Row elements should not be separated by commas.\n\n::: {#144 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_matrix = [1 2 3; 4 5 6]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n```\n:::\n:::\n\n\n\nYou can also specify matrices using spaces and newlines.\n\n::: {#146 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_matrix_2 = [1 2 3\n\t\t\t\t 4 5 6]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n```\n:::\n:::\n\n\nFinally, matrices can be created using comprehensions by separating the inputs by a comma.\n\n::: {#148 .cell execution_count=1}\n``` {.julia .cell-code}\n[i*j for i in 1:1:5, j in 1:1:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n5×5 Matrix{Int64}:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25\n```\n:::\n:::\n\n\n\nVectors are treated as 1d matrices.\n\n::: {#150 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_row_vector = [1 2 3]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n1×3 Matrix{Int64}:\n 1  2  3\n```\n:::\n:::\n\n\n\n::: {#152 .cell execution_count=1}\n``` {.julia .cell-code}\ntest_col_vector = [1; 2; 3]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n3-element Vector{Int64}:\n 1\n 2\n 3\n```\n:::\n:::\n\n\n\nMany linear algebra operations on vectors and matrices can be loaded using the `LinearAlgebra` package.\n\n## Package management\n\nSometimes you might need functionality that does not exist in base Julia. Julia handles packages using the [`Pkg` package manager](https://docs.julialang.org/en/v1/stdlib/Pkg/). After finding a package which has the functions that you need, you have two options:\n1. Use the package management prompt in the Julia REPL (the standard Julia interface; what you get when you type `julia` in your terminal). Enter this by typing `]` at the standard green Julia prompt `julia>`. This will become a blue `pkg>`. You can then download and install new packages using `add packagename`. \n2. From the standard prompt, enter `using Pkg; Pkg.add(packagename)`.\nThe `packagename` package can then be used by adding `using packagename` to the start of the script.\n\n",
    "supporting": [
      "julia-basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}