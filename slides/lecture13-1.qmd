---
title: "Information Criteria"
subtitle: "Lecture 19"
author: "Vivek Srikrishnan"
course: "BEE 4850"
institution: "Cornell University"
date: "April 22, 2024"
format:
    revealjs:
        slide-number: c/t
        show-slide-number: all
        center-title-slide: true
        width: 1280
        height: 720
        transition: none
        toc: true
        toc-depth: 1
        toc-title: "Overview"
        history: false
        link-external-newwindow: true
        theme: ../sass/slides.scss
        template-partials:
            - title-slide.html
        menu:
            numbers: true
        html-math-method: 
            method: mathjax
            url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js"
        include-in-header: mathjax-config.html
        date-format: long
        email-obfuscation: javascript
        chalkboard:
            theme: whiteboard
            buttons: true
        touch: false
        controls: true
engine: julia
julia:
    exeflags: ["+1.10.4"]          
execute:
    freeze: auto
---

```{julia}
#| output: false

import Pkg
Pkg.activate(@__DIR__)
Pkg.instantiate()
```

```{julia}
#| output: false

using Random
using DataFrames
using DataFramesMeta
using CSV
using Dates
using Distributions
using Turing
using ColorSchemes
using Plots
using StatsPlots
using StatsBase
using LaTeXStrings
using Measures
using Optim

Random.seed!(1)
```

# Review of Last Class

## Bias-Variance Tradeoff


**Key Idea**: Model selection consists of navigating the bias-variance tradeoff.

Model error (*e.g.* RMSE) is a combination of *irreducible error*, *bias*, and *variance*.

## Bias

**Bias** is error from mismatches between the model predictions and the data ($\text{Bias}[\hat{f}] = \mathbb{E}[\hat{f}] - y$).

Bias comes from under-fitting meaningful relationships between inputs and outputs.

- too few degrees of freedom ("too simple")
- neglected processes.

## Variance

**Variance** is error from over-sensitivity to small fluctuations in inputs ($\text{Variance} = \text{Var}(\hat{f})$).

Variance can come from over-fitting noise in the data.

- too many degrees of freedom ("too complex")
- poor identifiability

## Bias-Variance Tradeoff

**Upshot**: For achieve a fixed error level, you can reduce bias (more "complex" model) or you can reduce variance (more "simple" model) but there's a tradeoff.

## Bias-Variance Tradeoff More Generally 

This decomposition is for MSE, but the **principle holds more generally**.

- Models which perform better "on average" over the training data (low bias) are more likely to overfit (high variance);
- Models which have less uncertainty for training data (low variance) will do worse "on average".

## Cross-Validation

The "gold standard" way to test for predictive performance is **cross-validation**:

1. Split data into training/testing sets;
2. Calibrate model to training set;
3. Check for predictive ability on testing set.

## Leave-One-Out Cross-Validation

1. Drop one value $y_i$.
2. Refit model on rest of data $y_{-i}$.
3. Evaluate $\log p(y_i | y_{-i})$.
4. Repeat on rest of data set.


## Leave-$k$-Out Cross-Validation

Drop $k$ values, refit model on rest of data, check for predictive skill.

As $k \to n$, this reduces to the prior predictive distribution
$$p(y^{\text{rep}}) = \int_{\theta} p(y^{\text{rep}} | \theta) p(\theta) d\theta.$$

## Expected Out-Of-Sample Predictive Accuracy

The out-of-sample predictive fit of a new data point $\tilde{y}_i$ is

$$
\begin{align}
\log p_\text{post}(\tilde{y}_i) &= \log \mathbb{E}_\text{post}\left[p(\tilde{y}_i | \theta)\right] \\
&= \log \int p(\tilde{y_i} | \theta) p_\text{post}(\theta)\,d\theta.
\end{align}
$$

## Expected Out-Of-Sample Predictive Accuracy

However, the out-of-sample data $\tilde{y}_i$ is itself unknown, so we need to compute the *expected out-of-sample log-predictive density*

$$
\begin{align}
\text{elpd} &= \text{expected log-predictive density for } \tilde{y}_i \\
&= \mathbb{E}_P \left[\log p_\text{post}(\tilde{y}_i)\right] \\
&= \int \log\left(p_\text{post}(\tilde{y}_i)\right) P(\tilde{y}_i)\,d\tilde{y}.
\end{align}
$$

## Expected Out-Of-Sample Predictive Accuracy

What is the challenge?

::: {.fragment .fade-in}
We don't know $P$ (the distribution of new data)!

We need some measure of the error induced by using an approximating distribution $Q$ from some model.
:::

# Information Criteria

## Information Criteria

"Information criteria" refers to a category of estimators of prediction error.

The idea: estimate predictive error using the fitted model.

## Information Criteria Overview

There is a common framework for all of these:

If we compute the expected log-predictive density for the existing data $p(y | \theta)$, this will be too good of a fit and will overestimate the predictive skill for new data.

## Information Criteria Corrections

We can adjust for that bias by correcting for the *effective number of parameters*, which can be thought of as the expected degrees of freedom in a model contributing to overfitting.



## Akaike Information Criterion (AIC)

The "first" information criterion that most people see.

Uses a point estimate (the maximum-likelihood estimate $\hat{\theta}_\text{MLE}$) to compute the log-predictive density for the data, corrected by the number of parameters $k$:

$$\widehat{\text{elpd}}_\text{AIC} = \log p(y | \hat{\theta}_\text{MLE}) - k.$$

## AIC Formula

The AIC is defined as $-2\widehat{\text{elpd}}_\text{AIC}$.

Due to this convention, lower AICs are better (they correspond to a higher predictive skill).

## AIC Correction Term

In the case of a normal model with independent and identically-distributed data and uniform priors, $k$ is the asymptotically "correct" bias term (there are modified corrections for small sample sizes).

However, with more informative priors and/or hierarchical models, the bias correction $k$ is no longer appropriate, as there is less "freedom" associated with each parameter.

## AIC: Storm Surge Example

```{julia}
#| output: false
#| echo: false


# load SF tide gauge data
# read in data and get annual maxima
function load_data(fname)
    date_format = DateFormat("yyyy-mm-dd HH:MM:SS")
    # This uses the DataFramesMeta.jl package, which makes it easy to string together commands to load and process data
    df = @chain fname begin
        CSV.read(DataFrame; header=false)
        rename("Column1" => "year", "Column2" => "month", "Column3" => "day", "Column4" => "hour", "Column5" => "gauge")
        # need to reformat the decimal date in the data file
        @transform :datetime = DateTime.(:year, :month, :day, :hour)
        # replace -99999 with missing
        @transform :gauge = ifelse.(abs.(:gauge) .>= 9999, missing, :gauge)
        select(:datetime, :gauge)
    end
    return df
end

dat = load_data("data/surge/h551.csv")

# detrend the data to remove the effects of sea-level rise and seasonal dynamics
ma_length = 366
ma_offset = Int(floor(ma_length/2))
moving_average(series,n) = [mean(@view series[i-n:i+n]) for i in n+1:length(series)-n]
dat_ma = DataFrame(datetime=dat.datetime[ma_offset+1:end-ma_offset], residual=dat.gauge[ma_offset+1:end-ma_offset] .- moving_average(dat.gauge, ma_offset))

# group data by year and compute the annual maxima
dat_ma = dropmissing(dat_ma) # drop missing data
dat_annmax = combine(dat_ma -> dat_ma[argmax(dat_ma.residual), :], groupby(DataFrames.transform(dat_ma, :datetime => x->year.(x)), :datetime_function))
delete!(dat_annmax, nrow(dat_annmax)) # delete 2023; haven't seen much of that year yet
rename!(dat_annmax, :datetime_function => :Year)
select!(dat_annmax, [:Year, :residual])

function load_pdo(fname)
    # This uses the DataFramesMeta.jl package, which makes it easy to string together commands to load and process data
    df = CSV.read(fname, DataFrame, delim=" ", ignorerepeated=true, header=2)
    # take yearly average
    @transform!(df, :PDO = mean(AsTable(names(df)[2:13])))
    @select!(df, $[:Year, :PDO])
    @rsubset!(df, :Year != 2023)
    return df
end

pdo = load_pdo("data/surge/ersst.v5.pdo.dat")
# subset for years that match the tide gauge data
years = dat_annmax[!, :Year]
@rsubset!(pdo, :Year in years)

@model function sf_stat(y)
    μ ~ truncated(Normal(1500, 200), lower=0)
    σ ~ truncated(Normal(100, 25), lower=0)
    ξ ~ Normal(0, 1)

    for i in 1:length(y)
        y[i] ~ GeneralizedExtremeValue(μ, σ, ξ)
    end
end

stat_mod = sf_stat(dat_annmax.residual)


@model function sf_nonstat(y)
    a ~ truncated(Normal(1500, 200), lower=0)
    b ~ Normal(0, 5)
    σ ~ truncated(Normal(100, 25), lower=0)
    ξ ~ Normal(0, 1)

    T = length(y)
    for i in 1:T
        y[i] ~ GeneralizedExtremeValue.(a .+ b * i, σ, ξ)
    end
end

nonstat_mod = sf_nonstat(dat_annmax.residual)

@model function sf_pdo(y, pdo)
    a ~ truncated(Normal(1500, 200), lower=0)
    b ~ Normal(0, 5)
    σ ~ truncated(Normal(100, 25), lower=0)
    ξ ~ Normal(0, 1)

    for i in 1:length(y)
        y[i] ~ GeneralizedExtremeValue.(a + b * pdo[i], σ, ξ)
    end
end

pdo_mod = sf_pdo(dat_annmax.residual, pdo.PDO)
```

Models:

1. Stationary ("null") model, $y_t \sim \text{GEV}(\mu, \sigma, \xi);$
2. Time nonstationary ("null-ish") model, $y_t \sim \text{GEV}(\mu_0 + \mu_1 t, \sigma, \xi);$
3. PDO nonstationary model, $y_t \sim \text{GEV}(\mu_0 + \mu_1 \text{PDO}_t, \sigma, \xi)$

## AIC Example

```{julia}
#| output: true
#| echo: true
#| code-fold: true

stat_mle = [1258.71, 56.27, 0.017]
stat_ll = -707.67
nonstat_mle = [1231.58, 0.42, 52.07, 0.075]
nonstat_ll = -702.45
pdo_mle = [1255.87, -12.39, 54.73, 0.033]
pdo_ll = -705.24

# compute AIC values
stat_aic = stat_ll - 3
nonstat_aic = nonstat_ll - 4
pdo_aic = pdo_ll - 4

model_aic = DataFrame(Model=["Stationary", "Time", "PDO"], LogLik=trunc.(Int64, round.([stat_ll, nonstat_ll, pdo_ll]; digits=0)), AIC=trunc.(Int64, round.(-2 * [stat_aic, nonstat_aic, pdo_aic]; digits=0)))
```

## AIC Interpretation

Absolute AIC values have **no meaning**, only the differences $\Delta_i = \text{AIC}_i - \text{AIC}_\text{min}$.

Some basic rules of thumb (from @Burnham2004-do):

- $\Delta_i < 2$ means the model has "strong" support across $\mathcal{M}$;
- $4 < \Delta_i < 7$ suggests "less" support;
- $\Delta_i > 10$ suggests "weak" or "no" support.

## AIC and Model Evidence

$\exp(-\Delta_i/2)$ can be thought of as a measure of the likelihood of the model given the data $y$. 

The ratio $$\exp(-\Delta_i/2) / \exp(-\Delta_j/2)$$ can approximate the relative evidence for  $M_i$ versus $M_j$.

## AIC and Model Averaging

This gives rise to the idea of *Akaike weights*:
$$w_i = \frac{\exp(-\Delta_i/2)}{\sum_{m=1}^M \exp(-\Delta_m/2)}.$$

Model projections can then be weighted based on $w_i$, which can be interpreted as the probability that $M_i$ is the best (in the sense of approximating the "true" predictive distribution) model in $\mathcal{M}$.

## Model Averaging vs. Selection

Model averaging can sometimes be beneficial vs. model selection.

Model selection can introduce bias from the selection process (this is particularly acute for stepwise selection due to path-dependence).

# Key Takeaways and Upcoming Schedule

## Key Takeaways

- LOO-CV is ideal for navigating bias-variance tradeoff but can be computationally prohibitive.
- Information Criteria are an approximation to LOO-CV based on "correcting" for model complexity.
- Approximation to out of sample predictive error as a penalty for *potential to overfit*.


## Next Classes

**Wednesday**: Other Information Criteria

# References

## References

